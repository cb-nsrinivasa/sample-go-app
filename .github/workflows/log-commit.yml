name: Build Go Project

on: push

jobs:
  echo-env-context-vars:
    runs-on: ubuntu-latest
    env:
      MY_NAME: "this-secret"
    steps:
      - name: Print GitHub Context Variables
        run: echo '${{ toJson(github) }}'
      - name: Print GitHub env
        run: env         
        
  changing-masked-env-var:
    runs-on: ubuntu-latest
    env:
      MY_NAME: "this-secret"
    steps:
      - name: mark-secret
        run: echo "::add-mask::$MY_NAME"
      - name: log-secret
        run: echo "We retrieved our masked secret $MY_NAME"
      - name: Set new value
        run: echo "MY_NAME=UpdatedValue" >> $GITHUB_ENV
      - name: log-changed-secret
        run: echo "We retrieved our masked secret $MY_NAME"
        
  masking-using-printf:
    runs-on: ubuntu-latest
    env:
      MY_NAME: "this-secret"
    steps:
      - name: mark-secret
        run: printf "::add-mask::$MY_NAME"
      - name: log-secret
        run: printf "We retrieved our masked secret $MY_NAME"
      - name: Set new value
        run: printf "MY_NAME=UpdatedValue" >> $GITHUB_ENV
      - name: log-changed-secret
        run: printf "We retrieved our masked secret $MY_NAME"


  masking-without-any-stdout:
    runs-on: ubuntu-latest
    env:
      MY_NAME: "this-secret"
    steps:
      - name: mark-secret
        run: ::add-mask::$MY_NAME
      - name: log-secret
        run: printf "We retrieved our masked secret $MY_NAME"

        
  masking-with-prefix:
    runs-on: ubuntu-latest
    env:
      MY_NAME: "this-secret"
    steps:
      - name: mark-secret-prefix
        run: echo "prefix::add-mask::$MY_NAME"
      - name: log-secret
        run: echo "We retrieved our masked secret $MY_NAME"

  log-masked-string:
    runs-on: ubuntu-latest
    env:
      MY_NAME: "this-secret"
    steps:
      - name: mark-secret
        run: echo "::add-mask::$MY_NAME"
      - name: log-secret
        run: echo "We retrieved our masked secret $MY_NAME"
      - name: log-hard-coded-secret-string
        run: echo "We retrieved our masked secret this-secret"


  log-multi-line-string:
    runs-on: ubuntu-latest
    env:
      MY_NAME: "this-\nsecret"
    steps:
      - name: log-secret-before-mask
        run: echo "We retrieved our masked secret $MY_NAME"
      - name: log-secret-before-mask-E
        run: echo -E "We retrieved our masked secret $MY_NAME"   
      - name: mark-secret
        run: echo "::add-mask::$MY_NAME"
      - name: log-secret
        run: echo "We retrieved our masked secret $MY_NAME"


  log-dynamic-masked-cmd:
    runs-on: ubuntu-latest
    steps:
      - name: dynamic-var
        run: echo "::add-mask::$(date +"%Y%m%d")"
      - name: dynamic-var-without-mask
        run: echo "$(date +"%Y%m%d")"


  log-chained-cmd:
    runs-on: ubuntu-latest
    env:
      MY_NAME: "this-secret"
    steps:
      - name: echo-env
        run: echo "$MY_NAME"
      - name: chained-command-without-mask
        run: echo -n "$MY_NAME" ; echo "random-str"
      - name: mask-using-chained-command
        run: echo -n "::add-mask::$MY_NAME" ; echo "random-str"
      - name: echo-after-mask
        run: echo "$MY_NAME"
      - name: mask-using-chained-command-&
        run: echo -n "::add-mask::$MY_NAME" && echo "random-str"
      - name: mask-using-chained-command-|
        run: echo -n "::add-mask::$MY_NAME" || echo "random-str"

        
  log-dynamic-masked-chained-cmd:
    runs-on: ubuntu-latest
    steps:
      - name: mask-using-chained-command
        run: echo -n "::add-mask::$(date +"%Y%m%d")" ; echo "$(date +"%Y%m%d")"
      - name: dynamic-var-without-mask
        run: echo "$(date +"%Y%m%d")"


  log-dynamic-masked-chained-cmd-1:
    runs-on: ubuntu-latest
    steps:
      - name: mask-using-chained-command
        run: echo -n "::add-mask::$(date +"%Y%m%d")" && echo "$(date +"%Y%m%d")"
      - name: dynamic-var-without-mask
        run: echo "$(date +"%Y%m%d")"


################################ gh secrets
  echo-wrong-secret:
    runs-on: ubuntu-latest
    steps:
      - name: wrong secret
        run: echo "We retrieved secret from gh secret ${{ secrets.MY_SECRE }}"

  echo-secret:
    runs-on: ubuntu-latest
    steps:
      - name: from-gh-secret
        run: echo "We retrieved secret from gh secret ${{ secrets.SECRET }}"
      - name: substring-gh-secret
        run: echo "${{ secrets.SECRET }}" | awk '{print substr($0, 0, 5)}'



############################passing-masked-string

  job1:
    runs-on: ubuntu-latest
    env:
      MY_NAME: "this-secret"    
    outputs:
      message: ${{ steps.step1.outputs.RESULT }}
      sec: ${{ steps.step2.outputs.sec }}
      subsec: ${{ steps.step3.outputs.subsec }}
      hardcode: ${{ steps.step4.outputs.hardcode }}
    steps:
      - name: Step 1 - Generate Output
        id: step1
        run: echo "RESULT=Hello from Job 1" >> $GITHUB_OUTPUT
      - name: mark-secret
        run: echo "::add-mask::$MY_NAME"
      - name: output-masked secret
        id: step2
        run: echo "sec=$MY_NAME" >> $GITHUB_OUTPUT
      - name: output-masked-substrsecret
        id: step3
        run: echo "subsec=this" >> $GITHUB_OUTPUT        
      - name: output-hardcoded-secret
        id: step4
        run: | 
          SEC_VAL="xyz"
          echo "$SEC_VAL" 
          echo "hardcode=$SEC_VAL" >> $GITHUB_OUTPUT

        
  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - name: Step 2 - Use Output from Job 1
        run: echo "Received message ${{ needs.job1.outputs.message }}"
      - name: Step 2 - Use secret from Job 1
        run: echo "Received message ${{ needs.job1.outputs.sec }}"
      - name: Step 2 - Use substr secret from Job 1
        run: echo "Received message ${{ needs.job1.outputs.subsec }}"
      - name: Use hardcoded secret from Job 1
        run: echo "Received message ${{ needs.job1.outputs.hardcode }}"


